generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model companies {
  id                Int                 @id(map: "company_pkey") @default(autoincrement())
  name              String?             @db.VarChar(255)
  company_employees company_employees[]
}

model company_employees {
  id         Int        @id @default(autoincrement())
  user_id    Int?
  company_id Int?
  companies  companies? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company")
  users      users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model profile_images {
  id        Int     @id(map: "profile_image_pkey") @default(autoincrement())
  image_url String  @db.VarChar(255)
  users     users[]
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String? @db.VarChar(255)
  users users[]
}

model users {
  id                Int                 @id(map: "user_pkey") @default(autoincrement())
  email             String              @unique @db.VarChar(255)
  role_id           Int
  password          String?             @db.VarChar(500)
  username          String              @unique(map: "user_username_key") @db.VarChar(255)
  phone_number      String              @unique @db.VarChar(255)
  first_name        String              @db.VarChar(255)
  last_name         String              @db.VarChar(255)
  profile_image_id  Int?
  company_employees company_employees[]
  profile_images    profile_images?     @relation(fields: [profile_image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_image")
  roles             roles               @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rules")
}

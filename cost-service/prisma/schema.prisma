generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               Int               @id(map: "company_pkey") @default(autoincrement())
  name             String?           @db.VarChar(255)
  company_employee CompanyEmployee[]
}

model CompanyEmployee {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  company_id Int?
  company    Company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company")
  user       User?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model File {
  id          Int        @id(map: "profile_image_pkey") @default(autoincrement())
  bucket      String
  name        String
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  CondoUnit   CondoUnit? @relation(fields: [condoUnitId], references: [id])
  condoUnitId Int?
}

model Role {
  id   Int     @id @default(autoincrement())
  name String? @db.VarChar(255)
  user User[]
}

model User {
  id                Int               @id(map: "user_pkey") @unique @default(autoincrement())
  email             String            @unique @db.VarChar(255)
  role_id           Int
  password          String?           @db.VarChar(500)
  username          String            @unique(map: "user_username_key") @db.VarChar(255)
  phone_number      String            @unique @db.VarChar(255)
  first_name        String            @db.VarChar(255)
  last_name         String            @db.VarChar(255)
  company_employees CompanyEmployee[]
  role              Role              @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rules")
  UserCondo         UserCondo[]
  profile_image     File[]
}

model CondoUnit {
  id              Int               @id @unique @default(autoincrement())
  size            Float
  condo_Fee       Float
  property        Property?         @relation(fields: [property_id], references: [property_id])
  property_id     Int?
  parking_Spot    ParkingSpot       @relation(fields: [parkingspot_id], references: [spot_id])
  locker          Locker            @relation(fields: [locker_id], references: [locker_id])
  parkingspot_id  Int               @unique
  locker_id       Int               @unique
  RegistrationKey RegistrationKey[]
  UserCondo       UserCondo[]
  file            File[]
}

model Property {
  property_id   Int           @id @unique @default(autoincrement())
  name          String
  unit_count    Int
  parking_count Int
  locker_Count  Int
  address       String
  condo_unit    CondoUnit[]
  parking_spot  ParkingSpot[]
  Locker        Locker[]
}

model ParkingSpot {
  spot_id     Int        @id @unique @default(autoincrement())
  property    Property   @relation(fields: [property_id], references: [property_id])
  property_id Int
  condo_unit  CondoUnit?
}

model Locker {
  locker_id   Int        @id @unique @default(autoincrement())
  property    Property   @relation(fields: [property_id], references: [property_id])
  property_id Int
  CondoUnit   CondoUnit?
}

model RegistrationKey {
  id            Int       @id @unique @default(autoincrement())
  condo_unit    CondoUnit @relation(fields: [condo_unit_id], references: [id])
  condo_unit_id Int
}

model UserCondo {
  userID  Int
  condoID Int
  roleID  Int
  user    User      @relation(fields: [userID], references: [id])
  condo   CondoUnit @relation(fields: [condoID], references: [id])

  @@id([userID, condoID])
}

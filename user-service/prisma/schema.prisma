generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               Int               @id(map: "company_pkey") @default(autoincrement())
  name             String?           @db.VarChar(255)
  company_employee CompanyEmployee[]
  file             File[]
}

model CompanyEmployee {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  company_id Int?
  company    Company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company")
  user       User?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model File {
  id          Int        @id(map: "profile_image_pkey") @default(autoincrement())
  bucket      String
  name        String
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  CondoUnit   CondoUnit? @relation(fields: [condoUnitID], references: [id])
  condoUnitID Int?
  Property    Property?  @relation(fields: [propertyID], references: [propertyID])
  propertyID  Int?
  Company     Company?   @relation(fields: [companyID], references: [id])
  companyID   Int?
}

model Role {
  id   Int     @id @default(autoincrement())
  name String? @db.VarChar(255)
  user User[]
}

model User {
  id                Int               @id(map: "user_pkey") @unique @default(autoincrement())
  email             String            @unique @db.VarChar(255)
  role_id           Int
  password          String?           @db.VarChar(500)
  username          String            @unique(map: "user_username_key") @db.VarChar(255)
  phone_number      String            @unique @db.VarChar(255)
  first_name        String            @db.VarChar(255)
  last_name         String            @db.VarChar(255)
  company_employees CompanyEmployee[]
  role              Role              @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rules")
  UserCondo         UserCondo[]
  profile_image     File[]
}

model CondoUnit {
  id              Int               @id @unique @default(autoincrement())
  size            Float
  condoFee        Float
  property        Property?         @relation(fields: [propertyID], references: [propertyID])
  propertyID      Int?
  parkingSpot     ParkingSpot       @relation(fields: [parkingspotID], references: [spotID])
  locker          Locker            @relation(fields: [lockerID], references: [lockerID])
  parkingspotID   Int               @unique
  lockerID        Int               @unique
  RegistrationKey RegistrationKey[]
  UserCondo       UserCondo[]
  file            File[]
}

model Property {
  propertyID   Int           @id @unique @default(autoincrement())
  name         String
  unitCount    Int
  parkingCount Int
  lockerCount  Int
  address      String
  condoUnit    CondoUnit[]
  parkingSpot  ParkingSpot[]
  Locker       Locker[]
  file         File[]
}

model ParkingSpot {
  spotID     Int        @id @unique @default(autoincrement())
  property   Property   @relation(fields: [propertyID], references: [propertyID])
  propertyID Int
  condo_unit CondoUnit?
}

model Locker {
  lockerID   Int        @id @unique @default(autoincrement())
  property   Property   @relation(fields: [propertyID], references: [propertyID])
  propertyID Int
  CondoUnit  CondoUnit?
}

model RegistrationKey {
  id          Int       @id @unique @default(autoincrement())
  condoUnit   CondoUnit @relation(fields: [condoUnitID], references: [id])
  condoUnitID Int
}

model UserCondo {
  userID  Int
  condoID Int
  roleID  Int
  user    User      @relation(fields: [userID], references: [id])
  condo   CondoUnit @relation(fields: [condoID], references: [id])

  @@id([userID, condoID])
}
